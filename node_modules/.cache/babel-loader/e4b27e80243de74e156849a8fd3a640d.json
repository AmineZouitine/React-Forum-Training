{"ast":null,"code":"/**\n * React Router v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\n\n\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\n\n\nfunction Outlet(_props) {\n  return useOutlet();\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\n\n\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\n\n\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"mappings":"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","names":["invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","NavigationContext","React","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","basename","children","initialEntries","initialIndex","_ref","historyRef","current","createMemoryHistory","history","state","setState","action","location","listen","React.createElement","Router","navigationType","navigator","Navigate","to","replace","_ref2","useInRouterContext","static","navigate","useNavigate","Outlet","_props","useOutlet","Route","basenameProp","locationProp","NavigationType","Pop","staticProp","_ref3","normalizePathname","navigationContext","parsePath","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","parsedLocationArg","_parsedLocationArg$pa","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","props","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","routesArg","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths"],"sources":["/home/aminou/React/packages/react-router/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Omit<\n  History,\n  \"action\" | \"location\" | \"back\" | \"forward\" | \"listen\" | \"block\"\n>;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(_props: OutletProps): React.ReactElement | null {\n  return useOutlet();\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactElement | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<ParamKey extends string = string>(\n  pattern: PathPattern | string\n): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  return matchPath(pattern, useLocation().pathname);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: { replace?: boolean; state?: any } = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(): React.ReactElement | null {\n  return React.useContext(RouteContext).outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<Key extends string = string>(): Readonly<\n  Params<Key>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath}/*\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  // TODO: attach original route object inside routesMeta so we don't need this arg\n  routesArg: RouteObject[],\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let routes = routesArg;\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = routes[meta.childrenIndex];\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children!;\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: string;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<ParamKey extends string = string>(\n  pattern: PathPattern | string,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, at least match a word boundary. This restricts parent\n        // routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"]},"metadata":{},"sourceType":"module"}