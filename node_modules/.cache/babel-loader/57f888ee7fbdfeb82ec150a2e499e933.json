{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\n\nconst Common = require('../common');\n\nconst Template = require('../template');\n\nconst internals = {};\n\ninternals.isDate = function (value) {\n  return value instanceof Date;\n};\n\nmodule.exports = Any.extend({\n  type: 'date',\n  coerce: {\n    from: ['number', 'string'],\n\n    method(value, _ref) {\n      let {\n        schema\n      } = _ref;\n      return {\n        value: internals.parse(value, schema._flags.format) || value\n      };\n    }\n\n  },\n\n  validate(value, _ref2) {\n    let {\n      schema,\n      error,\n      prefs\n    } = _ref2;\n\n    if (value instanceof Date && !isNaN(value.getTime())) {\n      return;\n    }\n\n    const format = schema._flags.format;\n\n    if (!prefs.convert || !format || typeof value !== 'string') {\n      return {\n        value,\n        errors: error('date.base')\n      };\n    }\n\n    return {\n      value,\n      errors: error('date.format', {\n        format\n      })\n    };\n  },\n\n  rules: {\n    compare: {\n      method: false,\n\n      validate(value, helpers, _ref3, _ref4) {\n        let {\n          date\n        } = _ref3;\n        let {\n          name,\n          operator,\n          args\n        } = _ref4;\n        const to = date === 'now' ? Date.now() : date.getTime();\n\n        if (Common.compare(value.getTime(), to, operator)) {\n          return value;\n        }\n\n        return helpers.error('date.' + name, {\n          limit: args.date,\n          value\n        });\n      },\n\n      args: [{\n        name: 'date',\n        ref: true,\n        normalize: date => {\n          return date === 'now' ? date : internals.parse(date);\n        },\n        assert: date => date !== null,\n        message: 'must have a valid date format'\n      }]\n    },\n    format: {\n      method(format) {\n        Assert(['iso', 'javascript', 'unix'].includes(format), 'Unknown date format', format);\n        return this.$_setFlag('format', format);\n      }\n\n    },\n    greater: {\n      method(date) {\n        return this.$_addRule({\n          name: 'greater',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '>'\n        });\n      }\n\n    },\n    iso: {\n      method() {\n        return this.format('iso');\n      }\n\n    },\n    less: {\n      method(date) {\n        return this.$_addRule({\n          name: 'less',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '<'\n        });\n      }\n\n    },\n    max: {\n      method(date) {\n        return this.$_addRule({\n          name: 'max',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '<='\n        });\n      }\n\n    },\n    min: {\n      method(date) {\n        return this.$_addRule({\n          name: 'min',\n          method: 'compare',\n          args: {\n            date\n          },\n          operator: '>='\n        });\n      }\n\n    },\n    timestamp: {\n      method() {\n        let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'javascript';\n        Assert(['javascript', 'unix'].includes(type), '\"type\" must be one of \"javascript, unix\"');\n        return this.format(type);\n      }\n\n    }\n  },\n  cast: {\n    number: {\n      from: internals.isDate,\n\n      to(value, helpers) {\n        return value.getTime();\n      }\n\n    },\n    string: {\n      from: internals.isDate,\n\n      to(value, _ref5) {\n        let {\n          prefs\n        } = _ref5;\n        return Template.date(value, prefs);\n      }\n\n    }\n  },\n  messages: {\n    'date.base': '{{#label}} must be a valid date',\n    'date.format': '{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\n    'date.greater': '{{#label}} must be greater than \"{{#limit}}\"',\n    'date.less': '{{#label}} must be less than \"{{#limit}}\"',\n    'date.max': '{{#label}} must be less than or equal to \"{{#limit}}\"',\n    'date.min': '{{#label}} must be larger than or equal to \"{{#limit}}\"',\n    // Messages used in date.format\n    'date.format.iso': 'ISO 8601 date',\n    'date.format.javascript': 'timestamp or number of milliseconds',\n    'date.format.unix': 'timestamp or number of seconds'\n  }\n}); // Helpers\n\ninternals.parse = function (value, format) {\n  if (value instanceof Date) {\n    return value;\n  }\n\n  if (typeof value !== 'string' && (isNaN(value) || !isFinite(value))) {\n    return null;\n  }\n\n  if (/^\\s*$/.test(value)) {\n    return null;\n  } // ISO\n\n\n  if (format === 'iso') {\n    if (!Common.isIsoDate(value)) {\n      return null;\n    }\n\n    return internals.date(value.toString());\n  } // Normalize number string\n\n\n  const original = value;\n\n  if (typeof value === 'string' && /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n    value = parseFloat(value);\n  } // Timestamp\n\n\n  if (format) {\n    if (format === 'javascript') {\n      return internals.date(1 * value); // Casting to number\n    }\n\n    if (format === 'unix') {\n      return internals.date(1000 * value);\n    }\n\n    if (typeof original === 'string') {\n      return null;\n    }\n  } // Plain\n\n\n  return internals.date(value);\n};\n\ninternals.date = function (value) {\n  const date = new Date(value);\n\n  if (!isNaN(date.getTime())) {\n    return date;\n  }\n\n  return null;\n};","map":{"version":3,"names":["Assert","require","Any","Common","Template","internals","isDate","value","Date","module","exports","extend","type","coerce","from","method","schema","parse","_flags","format","validate","error","prefs","isNaN","getTime","convert","errors","rules","compare","helpers","date","name","operator","args","to","now","limit","ref","normalize","assert","message","includes","$_setFlag","greater","$_addRule","iso","less","max","min","timestamp","cast","number","string","messages","isFinite","test","isIsoDate","toString","original","parseFloat"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/joi/lib/types/date.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Template = require('../template');\n\n\nconst internals = {};\n\n\ninternals.isDate = function (value) {\n\n    return value instanceof Date;\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'date',\n\n    coerce: {\n        from: ['number', 'string'],\n        method(value, { schema }) {\n\n            return { value: internals.parse(value, schema._flags.format) || value };\n        }\n    },\n\n    validate(value, { schema, error, prefs }) {\n\n        if (value instanceof Date &&\n            !isNaN(value.getTime())) {\n\n            return;\n        }\n\n        const format = schema._flags.format;\n\n        if (!prefs.convert ||\n            !format ||\n            typeof value !== 'string') {\n\n            return { value, errors: error('date.base') };\n        }\n\n        return { value, errors: error('date.format', { format }) };\n    },\n\n    rules: {\n\n        compare: {\n            method: false,\n            validate(value, helpers, { date }, { name, operator, args }) {\n\n                const to = date === 'now' ? Date.now() : date.getTime();\n                if (Common.compare(value.getTime(), to, operator)) {\n                    return value;\n                }\n\n                return helpers.error('date.' + name, { limit: args.date, value });\n            },\n            args: [\n                {\n                    name: 'date',\n                    ref: true,\n                    normalize: (date) => {\n\n                        return date === 'now' ? date : internals.parse(date);\n                    },\n                    assert: (date) => date !== null,\n                    message: 'must have a valid date format'\n                }\n            ]\n        },\n\n        format: {\n            method(format) {\n\n                Assert(['iso', 'javascript', 'unix'].includes(format), 'Unknown date format', format);\n\n                return this.$_setFlag('format', format);\n            }\n        },\n\n        greater: {\n            method(date) {\n\n                return this.$_addRule({ name: 'greater', method: 'compare', args: { date }, operator: '>' });\n            }\n        },\n\n        iso: {\n            method() {\n\n                return this.format('iso');\n            }\n        },\n\n        less: {\n            method(date) {\n\n                return this.$_addRule({ name: 'less', method: 'compare', args: { date }, operator: '<' });\n            }\n        },\n\n        max: {\n            method(date) {\n\n                return this.$_addRule({ name: 'max', method: 'compare', args: { date }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(date) {\n\n                return this.$_addRule({ name: 'min', method: 'compare', args: { date }, operator: '>=' });\n            }\n        },\n\n        timestamp: {\n            method(type = 'javascript') {\n\n                Assert(['javascript', 'unix'].includes(type), '\"type\" must be one of \"javascript, unix\"');\n\n                return this.format(type);\n            }\n        }\n    },\n\n    cast: {\n        number: {\n            from: internals.isDate,\n            to(value, helpers) {\n\n                return value.getTime();\n            }\n        },\n        string: {\n            from: internals.isDate,\n            to(value, { prefs }) {\n\n                return Template.date(value, prefs);\n            }\n        }\n    },\n\n    messages: {\n        'date.base': '{{#label}} must be a valid date',\n        'date.format': '{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\n        'date.greater': '{{#label}} must be greater than \"{{#limit}}\"',\n        'date.less': '{{#label}} must be less than \"{{#limit}}\"',\n        'date.max': '{{#label}} must be less than or equal to \"{{#limit}}\"',\n        'date.min': '{{#label}} must be larger than or equal to \"{{#limit}}\"',\n\n        // Messages used in date.format\n\n        'date.format.iso': 'ISO 8601 date',\n        'date.format.javascript': 'timestamp or number of milliseconds',\n        'date.format.unix': 'timestamp or number of seconds'\n    }\n});\n\n\n// Helpers\n\ninternals.parse = function (value, format) {\n\n    if (value instanceof Date) {\n        return value;\n    }\n\n    if (typeof value !== 'string' &&\n        (isNaN(value) || !isFinite(value))) {\n\n        return null;\n    }\n\n    if (/^\\s*$/.test(value)) {\n        return null;\n    }\n\n    // ISO\n\n    if (format === 'iso') {\n        if (!Common.isIsoDate(value)) {\n            return null;\n        }\n\n        return internals.date(value.toString());\n    }\n\n    // Normalize number string\n\n    const original = value;\n    if (typeof value === 'string' &&\n        /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n\n        value = parseFloat(value);\n    }\n\n    // Timestamp\n\n    if (format) {\n        if (format === 'javascript') {\n            return internals.date(1 * value);        // Casting to number\n        }\n\n        if (format === 'unix') {\n            return internals.date(1000 * value);\n        }\n\n        if (typeof original === 'string') {\n            return null;\n        }\n    }\n\n    // Plain\n\n    return internals.date(value);\n};\n\n\ninternals.date = function (value) {\n\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n        return date;\n    }\n\n    return null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}