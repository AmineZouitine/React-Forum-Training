{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Uri = require('./uri');\n\nconst internals = {};\n\nexports.regex = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // CIDR\n  Assert(options.cidr === undefined || typeof options.cidr === 'string', 'options.cidr must be a string');\n  const cidr = options.cidr ? options.cidr.toLowerCase() : 'optional';\n  Assert(['required', 'optional', 'forbidden'].includes(cidr), 'options.cidr must be one of required, optional, forbidden'); // Versions\n\n  Assert(options.version === undefined || typeof options.version === 'string' || Array.isArray(options.version), 'options.version must be a string or an array of string');\n  let versions = options.version || ['ipv4', 'ipv6', 'ipvfuture'];\n\n  if (!Array.isArray(versions)) {\n    versions = [versions];\n  }\n\n  Assert(versions.length >= 1, 'options.version must have at least 1 version specified');\n\n  for (let i = 0; i < versions.length; ++i) {\n    Assert(typeof versions[i] === 'string', 'options.version must only contain strings');\n    versions[i] = versions[i].toLowerCase();\n    Assert(['ipv4', 'ipv6', 'ipvfuture'].includes(versions[i]), 'options.version contains unknown version ' + versions[i] + ' - must be one of ipv4, ipv6, ipvfuture');\n  }\n\n  versions = Array.from(new Set(versions)); // Regex\n\n  const parts = versions.map(version => {\n    // Forbidden\n    if (cidr === 'forbidden') {\n      return Uri.ip[version];\n    } // Required\n\n\n    const cidrpart = `\\\\/${version === 'ipv4' ? Uri.ip.v4Cidr : Uri.ip.v6Cidr}`;\n\n    if (cidr === 'required') {\n      return `${Uri.ip[version]}${cidrpart}`;\n    } // Optional\n\n\n    return `${Uri.ip[version]}(?:${cidrpart})?`;\n  });\n  const raw = `(?:${parts.join('|')})`;\n  const regex = new RegExp(`^${raw}$`);\n  return {\n    cidr,\n    versions,\n    regex,\n    raw\n  };\n};","map":{"version":3,"names":["Assert","require","Uri","internals","exports","regex","options","cidr","undefined","toLowerCase","includes","version","Array","isArray","versions","length","i","from","Set","parts","map","ip","cidrpart","v4Cidr","v6Cidr","raw","join","RegExp"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/address/lib/ip.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Uri = require('./uri');\n\n\nconst internals = {};\n\n\nexports.regex = function (options = {}) {\n\n    // CIDR\n\n    Assert(options.cidr === undefined || typeof options.cidr === 'string', 'options.cidr must be a string');\n    const cidr = options.cidr ? options.cidr.toLowerCase() : 'optional';\n    Assert(['required', 'optional', 'forbidden'].includes(cidr), 'options.cidr must be one of required, optional, forbidden');\n\n    // Versions\n\n    Assert(options.version === undefined || typeof options.version === 'string' || Array.isArray(options.version), 'options.version must be a string or an array of string');\n    let versions = options.version || ['ipv4', 'ipv6', 'ipvfuture'];\n    if (!Array.isArray(versions)) {\n        versions = [versions];\n    }\n\n    Assert(versions.length >= 1, 'options.version must have at least 1 version specified');\n\n    for (let i = 0; i < versions.length; ++i) {\n        Assert(typeof versions[i] === 'string', 'options.version must only contain strings');\n        versions[i] = versions[i].toLowerCase();\n        Assert(['ipv4', 'ipv6', 'ipvfuture'].includes(versions[i]), 'options.version contains unknown version ' + versions[i] + ' - must be one of ipv4, ipv6, ipvfuture');\n    }\n\n    versions = Array.from(new Set(versions));\n\n    // Regex\n\n    const parts = versions.map((version) => {\n\n        // Forbidden\n\n        if (cidr === 'forbidden') {\n            return Uri.ip[version];\n        }\n\n        // Required\n\n        const cidrpart = `\\\\/${version === 'ipv4' ? Uri.ip.v4Cidr : Uri.ip.v6Cidr}`;\n\n        if (cidr === 'required') {\n            return `${Uri.ip[version]}${cidrpart}`;\n        }\n\n        // Optional\n\n        return `${Uri.ip[version]}(?:${cidrpart})?`;\n    });\n\n    const raw = `(?:${parts.join('|')})`;\n    const regex = new RegExp(`^${raw}$`);\n    return { cidr, versions, regex, raw };\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAGA,MAAME,SAAS,GAAG,EAAlB;;AAGAC,OAAO,CAACC,KAAR,GAAgB,YAAwB;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAEpC;EAEAN,MAAM,CAACM,OAAO,CAACC,IAAR,KAAiBC,SAAjB,IAA8B,OAAOF,OAAO,CAACC,IAAf,KAAwB,QAAvD,EAAiE,+BAAjE,CAAN;EACA,MAAMA,IAAI,GAAGD,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaE,WAAb,EAAf,GAA4C,UAAzD;EACAT,MAAM,CAAC,CAAC,UAAD,EAAa,UAAb,EAAyB,WAAzB,EAAsCU,QAAtC,CAA+CH,IAA/C,CAAD,EAAuD,2DAAvD,CAAN,CANoC,CAQpC;;EAEAP,MAAM,CAACM,OAAO,CAACK,OAAR,KAAoBH,SAApB,IAAiC,OAAOF,OAAO,CAACK,OAAf,KAA2B,QAA5D,IAAwEC,KAAK,CAACC,OAAN,CAAcP,OAAO,CAACK,OAAtB,CAAzE,EAAyG,wDAAzG,CAAN;EACA,IAAIG,QAAQ,GAAGR,OAAO,CAACK,OAAR,IAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,WAAjB,CAAlC;;EACA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAL,EAA8B;IAC1BA,QAAQ,GAAG,CAACA,QAAD,CAAX;EACH;;EAEDd,MAAM,CAACc,QAAQ,CAACC,MAAT,IAAmB,CAApB,EAAuB,wDAAvB,CAAN;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACC,MAA7B,EAAqC,EAAEC,CAAvC,EAA0C;IACtChB,MAAM,CAAC,OAAOc,QAAQ,CAACE,CAAD,CAAf,KAAuB,QAAxB,EAAkC,2CAAlC,CAAN;IACAF,QAAQ,CAACE,CAAD,CAAR,GAAcF,QAAQ,CAACE,CAAD,CAAR,CAAYP,WAAZ,EAAd;IACAT,MAAM,CAAC,CAAC,MAAD,EAAS,MAAT,EAAiB,WAAjB,EAA8BU,QAA9B,CAAuCI,QAAQ,CAACE,CAAD,CAA/C,CAAD,EAAsD,8CAA8CF,QAAQ,CAACE,CAAD,CAAtD,GAA4D,yCAAlH,CAAN;EACH;;EAEDF,QAAQ,GAAGF,KAAK,CAACK,IAAN,CAAW,IAAIC,GAAJ,CAAQJ,QAAR,CAAX,CAAX,CAxBoC,CA0BpC;;EAEA,MAAMK,KAAK,GAAGL,QAAQ,CAACM,GAAT,CAAcT,OAAD,IAAa;IAEpC;IAEA,IAAIJ,IAAI,KAAK,WAAb,EAA0B;MACtB,OAAOL,GAAG,CAACmB,EAAJ,CAAOV,OAAP,CAAP;IACH,CANmC,CAQpC;;;IAEA,MAAMW,QAAQ,GAAI,MAAKX,OAAO,KAAK,MAAZ,GAAqBT,GAAG,CAACmB,EAAJ,CAAOE,MAA5B,GAAqCrB,GAAG,CAACmB,EAAJ,CAAOG,MAAO,EAA1E;;IAEA,IAAIjB,IAAI,KAAK,UAAb,EAAyB;MACrB,OAAQ,GAAEL,GAAG,CAACmB,EAAJ,CAAOV,OAAP,CAAgB,GAAEW,QAAS,EAArC;IACH,CAdmC,CAgBpC;;;IAEA,OAAQ,GAAEpB,GAAG,CAACmB,EAAJ,CAAOV,OAAP,CAAgB,MAAKW,QAAS,IAAxC;EACH,CAnBa,CAAd;EAqBA,MAAMG,GAAG,GAAI,MAAKN,KAAK,CAACO,IAAN,CAAW,GAAX,CAAgB,GAAlC;EACA,MAAMrB,KAAK,GAAG,IAAIsB,MAAJ,CAAY,IAAGF,GAAI,GAAnB,CAAd;EACA,OAAO;IAAElB,IAAF;IAAQO,QAAR;IAAkBT,KAAlB;IAAyBoB;EAAzB,CAAP;AACH,CApDD"},"metadata":{},"sourceType":"script"}