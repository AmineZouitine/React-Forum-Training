{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst EscapeRegex = require('@hapi/hoek/lib/escapeRegex');\n\nconst internals = {};\n\ninternals.generate = function () {\n  const rfc3986 = {};\n  const hexDigit = '\\\\dA-Fa-f'; // HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n\n  const hexDigitOnly = '[' + hexDigit + ']';\n  const unreserved = '\\\\w-\\\\.~'; // unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n  const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;='; // sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n  const pctEncoded = '%' + hexDigit; // pct-encoded = \"%\" HEXDIG HEXDIG\n\n  const pchar = unreserved + pctEncoded + subDelims + ':@'; // pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\n  const pcharOnly = '[' + pchar + ']';\n  const decOctect = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])'; // dec-octet = DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35  ; 0-9 / 10-99 / 100-199 / 200-249 / 250-255\n\n  rfc3986.ipv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect; // IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n\n  /*\n      h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n      ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n      IPv6address =                            6( h16 \":\" ) ls32\n                  /                       \"::\" 5( h16 \":\" ) ls32\n                  / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n                  / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n                  / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n                  / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n                  / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n                  / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n                  / [ *6( h16 \":\" ) h16 ] \"::\"\n  */\n\n  const h16 = hexDigitOnly + '{1,4}';\n  const ls32 = '(?:' + h16 + ':' + h16 + '|' + rfc3986.ipv4address + ')';\n  const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n  const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n  const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n  const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n  const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n  const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n  const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n  const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n  const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n  rfc3986.ipv4Cidr = '(?:\\\\d|[1-2]\\\\d|3[0-2])'; // IPv4 cidr = DIGIT / %x31-32 DIGIT / \"3\" %x30-32  ; 0-9 / 10-29 / 30-32\n\n  rfc3986.ipv6Cidr = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])'; // IPv6 cidr = DIGIT / %x31-39 DIGIT / \"1\" %x0-1 DIGIT / \"12\" %x0-8;   0-9 / 10-99 / 100-119 / 120-128\n\n  rfc3986.ipv6address = '(?:' + IPv6SixHex + '|' + IPv6FiveHex + '|' + IPv6FourHex + '|' + IPv6ThreeHex + '|' + IPv6TwoHex + '|' + IPv6OneHex + '|' + IPv6NoneHex + '|' + IPv6NoneHex2 + '|' + IPv6NoneHex3 + ')';\n  rfc3986.ipvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+'; // IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\n  rfc3986.scheme = '[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*'; // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\n  rfc3986.schemeRegex = new RegExp(rfc3986.scheme);\n  const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*'; // userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n\n  const IPLiteral = '\\\\[(?:' + rfc3986.ipv6address + '|' + rfc3986.ipvFuture + ')\\\\]'; // IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n\n  const regName = '[' + unreserved + pctEncoded + subDelims + ']{1,255}'; // reg-name = *( unreserved / pct-encoded / sub-delims )\n\n  const host = '(?:' + IPLiteral + '|' + rfc3986.ipv4address + '|' + regName + ')'; // host = IP-literal / IPv4address / reg-name\n\n  const port = '\\\\d*'; // port = *DIGIT\n\n  const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?'; // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n\n  const authorityCapture = '(?:' + userinfo + '@)?(' + host + ')(?::' + port + ')?';\n  /*\n      segment       = *pchar\n      segment-nz    = 1*pchar\n      path          = path-abempty    ; begins with \"/\" '|' is empty\n                  / path-absolute   ; begins with \"/\" but not \"//\"\n                  / path-noscheme   ; begins with a non-colon segment\n                  / path-rootless   ; begins with a segment\n                  / path-empty      ; zero characters\n      path-abempty  = *( \"/\" segment )\n      path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n      path-rootless = segment-nz *( \"/\" segment )\n  */\n\n  const segment = pcharOnly + '*';\n  const segmentNz = pcharOnly + '+';\n  const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n  const pathEmpty = '';\n  const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n  const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n  const pathRootless = segmentNz + pathAbEmpty;\n  const pathNoScheme = segmentNzNc + pathAbEmpty;\n  const pathAbNoAuthority = '(?:\\\\/\\\\/\\\\/' + segment + pathAbEmpty + ')'; // Used by file:///\n  // hier-part = \"//\" authority path\n\n  rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + '|' + pathAbNoAuthority + ')';\n  rfc3986.hierPartCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + ')'; // relative-part = \"//\" authority path-abempty / path-absolute / path-noscheme / path-empty\n\n  rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n  rfc3986.relativeRefCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')'; // query = *( pchar / \"/\" / \"?\" )\n  // query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n\n  rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part '|' end of the line.\n\n  rfc3986.queryWithSquareBrackets = '[' + pchar + '\\\\[\\\\]\\\\/\\\\?]*(?=#|$)'; // fragment = *( pchar / \"/\" / \"?\" )\n\n  rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n  return rfc3986;\n};\n\ninternals.rfc3986 = internals.generate();\nexports.ip = {\n  v4Cidr: internals.rfc3986.ipv4Cidr,\n  v6Cidr: internals.rfc3986.ipv6Cidr,\n  ipv4: internals.rfc3986.ipv4address,\n  ipv6: internals.rfc3986.ipv6address,\n  ipvfuture: internals.rfc3986.ipvFuture\n};\n\ninternals.createRegex = function (options) {\n  const rfc = internals.rfc3986; // Construct expression\n\n  const query = options.allowQuerySquareBrackets ? rfc.queryWithSquareBrackets : rfc.query;\n  const suffix = '(?:\\\\?' + query + ')?' + '(?:#' + rfc.fragment + ')?'; // relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n\n  const relative = options.domain ? rfc.relativeRefCapture : rfc.relativeRef;\n\n  if (options.relativeOnly) {\n    return internals.wrap(relative + suffix);\n  } // Custom schemes\n\n\n  let customScheme = '';\n\n  if (options.scheme) {\n    Assert(options.scheme instanceof RegExp || typeof options.scheme === 'string' || Array.isArray(options.scheme), 'scheme must be a RegExp, String, or Array');\n    const schemes = [].concat(options.scheme);\n    Assert(schemes.length >= 1, 'scheme must have at least 1 scheme specified'); // Flatten the array into a string to be used to match the schemes\n\n    const selections = [];\n\n    for (let i = 0; i < schemes.length; ++i) {\n      const scheme = schemes[i];\n      Assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');\n\n      if (scheme instanceof RegExp) {\n        selections.push(scheme.source.toString());\n      } else {\n        Assert(rfc.schemeRegex.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');\n        selections.push(EscapeRegex(scheme));\n      }\n    }\n\n    customScheme = selections.join('|');\n  } // URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\n\n  const scheme = customScheme ? '(?:' + customScheme + ')' : rfc.scheme;\n  const absolute = '(?:' + scheme + ':' + (options.domain ? rfc.hierPartCapture : rfc.hierPart) + ')';\n  const prefix = options.allowRelative ? '(?:' + absolute + '|' + relative + ')' : absolute;\n  return internals.wrap(prefix + suffix, customScheme);\n};\n\ninternals.wrap = function (raw, scheme) {\n  raw = `(?=.)(?!https?\\:/$)${raw}`; // Require at least one character and explicitly forbid 'http:/'\n\n  return {\n    raw,\n    regex: new RegExp(`^${raw}$`),\n    scheme\n  };\n};\n\ninternals.uriRegex = internals.createRegex({});\n\nexports.regex = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (options.scheme || options.allowRelative || options.relativeOnly || options.allowQuerySquareBrackets || options.domain) {\n    return internals.createRegex(options);\n  }\n\n  return internals.uriRegex;\n};","map":{"version":3,"names":["Assert","require","EscapeRegex","internals","generate","rfc3986","hexDigit","hexDigitOnly","unreserved","subDelims","pctEncoded","pchar","pcharOnly","decOctect","ipv4address","h16","ls32","IPv6SixHex","IPv6FiveHex","IPv6FourHex","IPv6ThreeHex","IPv6TwoHex","IPv6OneHex","IPv6NoneHex","IPv6NoneHex2","IPv6NoneHex3","ipv4Cidr","ipv6Cidr","ipv6address","ipvFuture","scheme","schemeRegex","RegExp","userinfo","IPLiteral","regName","host","port","authority","authorityCapture","segment","segmentNz","segmentNzNc","pathEmpty","pathAbEmpty","pathAbsolute","pathRootless","pathNoScheme","pathAbNoAuthority","hierPart","hierPartCapture","relativeRef","relativeRefCapture","query","queryWithSquareBrackets","fragment","exports","ip","v4Cidr","v6Cidr","ipv4","ipv6","ipvfuture","createRegex","options","rfc","allowQuerySquareBrackets","suffix","relative","domain","relativeOnly","wrap","customScheme","Array","isArray","schemes","concat","length","selections","i","push","source","toString","test","join","absolute","prefix","allowRelative","raw","regex","uriRegex"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/address/lib/uri.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst EscapeRegex = require('@hapi/hoek/lib/escapeRegex');\n\n\nconst internals = {};\n\n\ninternals.generate = function () {\n\n    const rfc3986 = {};\n\n    const hexDigit = '\\\\dA-Fa-f';                                               // HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n    const hexDigitOnly = '[' + hexDigit + ']';\n\n    const unreserved = '\\\\w-\\\\.~';                                              // unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n    const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';                                 // sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n    const pctEncoded = '%' + hexDigit;                                          // pct-encoded = \"%\" HEXDIG HEXDIG\n    const pchar = unreserved + pctEncoded + subDelims + ':@';                   // pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n    const pcharOnly = '[' + pchar + ']';\n    const decOctect = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])';     // dec-octet = DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35  ; 0-9 / 10-99 / 100-199 / 200-249 / 250-255\n\n    rfc3986.ipv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect;            // IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n\n    /*\n        h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n        ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n        IPv6address =                            6( h16 \":\" ) ls32\n                    /                       \"::\" 5( h16 \":\" ) ls32\n                    / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n                    / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n                    / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n                    / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n                    / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n                    / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n                    / [ *6( h16 \":\" ) h16 ] \"::\"\n    */\n\n    const h16 = hexDigitOnly + '{1,4}';\n    const ls32 = '(?:' + h16 + ':' + h16 + '|' + rfc3986.ipv4address + ')';\n    const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n    const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n    const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n    const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n    const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n    const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n    const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n    const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n    const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n\n    rfc3986.ipv4Cidr = '(?:\\\\d|[1-2]\\\\d|3[0-2])';                                           // IPv4 cidr = DIGIT / %x31-32 DIGIT / \"3\" %x30-32  ; 0-9 / 10-29 / 30-32\n    rfc3986.ipv6Cidr = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])';                         // IPv6 cidr = DIGIT / %x31-39 DIGIT / \"1\" %x0-1 DIGIT / \"12\" %x0-8;   0-9 / 10-99 / 100-119 / 120-128\n    rfc3986.ipv6address = '(?:' + IPv6SixHex + '|' + IPv6FiveHex + '|' + IPv6FourHex + '|' + IPv6ThreeHex + '|' + IPv6TwoHex + '|' + IPv6OneHex + '|' + IPv6NoneHex + '|' + IPv6NoneHex2 + '|' + IPv6NoneHex3 + ')';\n    rfc3986.ipvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+';      // IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\n    rfc3986.scheme = '[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*';                                           // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    rfc3986.schemeRegex = new RegExp(rfc3986.scheme);\n\n    const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';                     // userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n    const IPLiteral = '\\\\[(?:' + rfc3986.ipv6address + '|' + rfc3986.ipvFuture + ')\\\\]';    // IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n    const regName = '[' + unreserved + pctEncoded + subDelims + ']{1,255}';                 // reg-name = *( unreserved / pct-encoded / sub-delims )\n    const host = '(?:' + IPLiteral + '|' + rfc3986.ipv4address + '|' + regName + ')';       // host = IP-literal / IPv4address / reg-name\n    const port = '\\\\d*';                                                                    // port = *DIGIT\n    const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';               // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n    const authorityCapture = '(?:' + userinfo + '@)?(' + host + ')(?::' + port + ')?';\n\n    /*\n        segment       = *pchar\n        segment-nz    = 1*pchar\n        path          = path-abempty    ; begins with \"/\" '|' is empty\n                    / path-absolute   ; begins with \"/\" but not \"//\"\n                    / path-noscheme   ; begins with a non-colon segment\n                    / path-rootless   ; begins with a segment\n                    / path-empty      ; zero characters\n        path-abempty  = *( \"/\" segment )\n        path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n        path-rootless = segment-nz *( \"/\" segment )\n    */\n\n    const segment = pcharOnly + '*';\n    const segmentNz = pcharOnly + '+';\n    const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n    const pathEmpty = '';\n    const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n    const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n    const pathRootless = segmentNz + pathAbEmpty;\n    const pathNoScheme = segmentNzNc + pathAbEmpty;\n    const pathAbNoAuthority = '(?:\\\\/\\\\/\\\\/' + segment + pathAbEmpty + ')';     // Used by file:///\n\n    // hier-part = \"//\" authority path\n\n    rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + '|' + pathAbNoAuthority + ')';\n    rfc3986.hierPartCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + ')';\n\n    // relative-part = \"//\" authority path-abempty / path-absolute / path-noscheme / path-empty\n\n    rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n    rfc3986.relativeRefCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n\n    // query = *( pchar / \"/\" / \"?\" )\n    // query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n\n    rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)';                            //Finish matching either at the fragment part '|' end of the line.\n    rfc3986.queryWithSquareBrackets = '[' + pchar + '\\\\[\\\\]\\\\/\\\\?]*(?=#|$)';\n\n    // fragment = *( pchar / \"/\" / \"?\" )\n\n    rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n\n    return rfc3986;\n};\n\ninternals.rfc3986 = internals.generate();\n\n\nexports.ip = {\n    v4Cidr: internals.rfc3986.ipv4Cidr,\n    v6Cidr: internals.rfc3986.ipv6Cidr,\n    ipv4: internals.rfc3986.ipv4address,\n    ipv6: internals.rfc3986.ipv6address,\n    ipvfuture: internals.rfc3986.ipvFuture\n};\n\n\ninternals.createRegex = function (options) {\n\n    const rfc = internals.rfc3986;\n\n    // Construct expression\n\n    const query = options.allowQuerySquareBrackets ? rfc.queryWithSquareBrackets : rfc.query;\n    const suffix = '(?:\\\\?' + query + ')?' + '(?:#' + rfc.fragment + ')?';\n\n    // relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n\n    const relative = options.domain ? rfc.relativeRefCapture : rfc.relativeRef;\n\n    if (options.relativeOnly) {\n        return internals.wrap(relative + suffix);\n    }\n\n    // Custom schemes\n\n    let customScheme = '';\n    if (options.scheme) {\n        Assert(options.scheme instanceof RegExp || typeof options.scheme === 'string' || Array.isArray(options.scheme), 'scheme must be a RegExp, String, or Array');\n\n        const schemes = [].concat(options.scheme);\n        Assert(schemes.length >= 1, 'scheme must have at least 1 scheme specified');\n\n        // Flatten the array into a string to be used to match the schemes\n\n        const selections = [];\n        for (let i = 0; i < schemes.length; ++i) {\n            const scheme = schemes[i];\n            Assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');\n\n            if (scheme instanceof RegExp) {\n                selections.push(scheme.source.toString());\n            }\n            else {\n                Assert(rfc.schemeRegex.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');\n                selections.push(EscapeRegex(scheme));\n            }\n        }\n\n        customScheme = selections.join('|');\n    }\n\n    // URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\n    const scheme = customScheme ? '(?:' + customScheme + ')' : rfc.scheme;\n    const absolute = '(?:' + scheme + ':' + (options.domain ? rfc.hierPartCapture : rfc.hierPart) + ')';\n    const prefix = options.allowRelative ? '(?:' + absolute + '|' + relative + ')' : absolute;\n    return internals.wrap(prefix + suffix, customScheme);\n};\n\n\ninternals.wrap = function (raw, scheme) {\n\n    raw = `(?=.)(?!https?\\:/$)${raw}`;              // Require at least one character and explicitly forbid 'http:/'\n\n    return {\n        raw,\n        regex: new RegExp(`^${raw}$`),\n        scheme\n    };\n};\n\n\ninternals.uriRegex = internals.createRegex({});\n\n\nexports.regex = function (options = {}) {\n\n    if (options.scheme ||\n        options.allowRelative ||\n        options.relativeOnly ||\n        options.allowQuerySquareBrackets ||\n        options.domain) {\n\n        return internals.createRegex(options);\n    }\n\n    return internals.uriRegex;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}