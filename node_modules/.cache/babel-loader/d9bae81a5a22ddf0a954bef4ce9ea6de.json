{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\n\nconst Common = require('./common');\n\nconst internals = {};\nmodule.exports = internals.Values = class {\n  constructor(values, refs) {\n    this._values = new Set(values);\n    this._refs = new Set(refs);\n    this._lowercase = internals.lowercases(values);\n    this._override = false;\n  }\n\n  get length() {\n    return this._values.size + this._refs.size;\n  }\n\n  add(value, refs) {\n    // Reference\n    if (Common.isResolvable(value)) {\n      if (!this._refs.has(value)) {\n        this._refs.add(value);\n\n        if (refs) {\n          // Skipped in a merge\n          refs.register(value);\n        }\n      }\n\n      return;\n    } // Value\n\n\n    if (!this.has(value, null, null, false)) {\n      this._values.add(value);\n\n      if (typeof value === 'string') {\n        this._lowercase.set(value.toLowerCase(), value);\n      }\n    }\n  }\n\n  static merge(target, source, remove) {\n    target = target || new internals.Values();\n\n    if (source) {\n      if (source._override) {\n        return source.clone();\n      }\n\n      for (const item of [...source._values, ...source._refs]) {\n        target.add(item);\n      }\n    }\n\n    if (remove) {\n      for (const item of [...remove._values, ...remove._refs]) {\n        target.remove(item);\n      }\n    }\n\n    return target.length ? target : null;\n  }\n\n  remove(value) {\n    // Reference\n    if (Common.isResolvable(value)) {\n      this._refs.delete(value);\n\n      return;\n    } // Value\n\n\n    this._values.delete(value);\n\n    if (typeof value === 'string') {\n      this._lowercase.delete(value.toLowerCase());\n    }\n  }\n\n  has(value, state, prefs, insensitive) {\n    return !!this.get(value, state, prefs, insensitive);\n  }\n\n  get(value, state, prefs, insensitive) {\n    if (!this.length) {\n      return false;\n    } // Simple match\n\n\n    if (this._values.has(value)) {\n      return {\n        value\n      };\n    } // Case insensitive string match\n\n\n    if (typeof value === 'string' && value && insensitive) {\n      const found = this._lowercase.get(value.toLowerCase());\n\n      if (found) {\n        return {\n          value: found\n        };\n      }\n    }\n\n    if (!this._refs.size && typeof value !== 'object') {\n      return false;\n    } // Objects\n\n\n    if (typeof value === 'object') {\n      for (const item of this._values) {\n        if (DeepEqual(item, value)) {\n          return {\n            value: item\n          };\n        }\n      }\n    } // References\n\n\n    if (state) {\n      for (const ref of this._refs) {\n        const resolved = ref.resolve(value, state, prefs, null, {\n          in: true\n        });\n\n        if (resolved === undefined) {\n          continue;\n        }\n\n        const items = !ref.in || typeof resolved !== 'object' ? [resolved] : Array.isArray(resolved) ? resolved : Object.keys(resolved);\n\n        for (const item of items) {\n          if (typeof item !== typeof value) {\n            continue;\n          }\n\n          if (insensitive && value && typeof value === 'string') {\n            if (item.toLowerCase() === value.toLowerCase()) {\n              return {\n                value: item,\n                ref\n              };\n            }\n          } else {\n            if (DeepEqual(item, value)) {\n              return {\n                value: item,\n                ref\n              };\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  override() {\n    this._override = true;\n  }\n\n  values(options) {\n    if (options && options.display) {\n      const values = [];\n\n      for (const item of [...this._values, ...this._refs]) {\n        if (item !== undefined) {\n          values.push(item);\n        }\n      }\n\n      return values;\n    }\n\n    return Array.from([...this._values, ...this._refs]);\n  }\n\n  clone() {\n    const set = new internals.Values(this._values, this._refs);\n    set._override = this._override;\n    return set;\n  }\n\n  concat(source) {\n    Assert(!source._override, 'Cannot concat override set of values');\n    const set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);\n    set._override = this._override;\n    return set;\n  }\n\n  describe() {\n    const normalized = [];\n\n    if (this._override) {\n      normalized.push({\n        override: true\n      });\n    }\n\n    for (const value of this._values.values()) {\n      normalized.push(value && typeof value === 'object' ? {\n        value\n      } : value);\n    }\n\n    for (const value of this._refs.values()) {\n      normalized.push(value.describe());\n    }\n\n    return normalized;\n  }\n\n};\ninternals.Values.prototype[Common.symbols.values] = true; // Aliases\n\ninternals.Values.prototype.slice = internals.Values.prototype.clone; // Helpers\n\ninternals.lowercases = function (from) {\n  const map = new Map();\n\n  if (from) {\n    for (const value of from) {\n      if (typeof value === 'string') {\n        map.set(value.toLowerCase(), value);\n      }\n    }\n  }\n\n  return map;\n};","map":{"version":3,"names":["Assert","require","DeepEqual","Common","internals","module","exports","Values","constructor","values","refs","_values","Set","_refs","_lowercase","lowercases","_override","length","size","add","value","isResolvable","has","register","set","toLowerCase","merge","target","source","remove","clone","item","delete","state","prefs","insensitive","get","found","ref","resolved","resolve","in","undefined","items","Array","isArray","Object","keys","override","options","display","push","from","concat","describe","normalized","prototype","symbols","slice","map","Map"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/joi/lib/values.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\n\nconst Common = require('./common');\n\n\nconst internals = {};\n\n\nmodule.exports = internals.Values = class {\n\n    constructor(values, refs) {\n\n        this._values = new Set(values);\n        this._refs = new Set(refs);\n        this._lowercase = internals.lowercases(values);\n\n        this._override = false;\n    }\n\n    get length() {\n\n        return this._values.size + this._refs.size;\n    }\n\n    add(value, refs) {\n\n        // Reference\n\n        if (Common.isResolvable(value)) {\n            if (!this._refs.has(value)) {\n                this._refs.add(value);\n\n                if (refs) {                     // Skipped in a merge\n                    refs.register(value);\n                }\n            }\n\n            return;\n        }\n\n        // Value\n\n        if (!this.has(value, null, null, false)) {\n            this._values.add(value);\n\n            if (typeof value === 'string') {\n                this._lowercase.set(value.toLowerCase(), value);\n            }\n        }\n    }\n\n    static merge(target, source, remove) {\n\n        target = target || new internals.Values();\n\n        if (source) {\n            if (source._override) {\n                return source.clone();\n            }\n\n            for (const item of [...source._values, ...source._refs]) {\n                target.add(item);\n            }\n        }\n\n        if (remove) {\n            for (const item of [...remove._values, ...remove._refs]) {\n                target.remove(item);\n            }\n        }\n\n        return target.length ? target : null;\n    }\n\n    remove(value) {\n\n        // Reference\n\n        if (Common.isResolvable(value)) {\n            this._refs.delete(value);\n            return;\n        }\n\n        // Value\n\n        this._values.delete(value);\n\n        if (typeof value === 'string') {\n            this._lowercase.delete(value.toLowerCase());\n        }\n    }\n\n    has(value, state, prefs, insensitive) {\n\n        return !!this.get(value, state, prefs, insensitive);\n    }\n\n    get(value, state, prefs, insensitive) {\n\n        if (!this.length) {\n            return false;\n        }\n\n        // Simple match\n\n        if (this._values.has(value)) {\n            return { value };\n        }\n\n        // Case insensitive string match\n\n        if (typeof value === 'string' &&\n            value &&\n            insensitive) {\n\n            const found = this._lowercase.get(value.toLowerCase());\n            if (found) {\n                return { value: found };\n            }\n        }\n\n        if (!this._refs.size &&\n            typeof value !== 'object') {\n\n            return false;\n        }\n\n        // Objects\n\n        if (typeof value === 'object') {\n            for (const item of this._values) {\n                if (DeepEqual(item, value)) {\n                    return { value: item };\n                }\n            }\n        }\n\n        // References\n\n        if (state) {\n            for (const ref of this._refs) {\n                const resolved = ref.resolve(value, state, prefs, null, { in: true });\n                if (resolved === undefined) {\n                    continue;\n                }\n\n                const items = !ref.in || typeof resolved !== 'object'\n                    ? [resolved]\n                    : Array.isArray(resolved) ? resolved : Object.keys(resolved);\n\n                for (const item of items) {\n                    if (typeof item !== typeof value) {\n                        continue;\n                    }\n\n                    if (insensitive &&\n                        value &&\n                        typeof value === 'string') {\n\n                        if (item.toLowerCase() === value.toLowerCase()) {\n                            return { value: item, ref };\n                        }\n                    }\n                    else {\n                        if (DeepEqual(item, value)) {\n                            return { value: item, ref };\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    override() {\n\n        this._override = true;\n    }\n\n    values(options) {\n\n        if (options &&\n            options.display) {\n\n            const values = [];\n\n            for (const item of [...this._values, ...this._refs]) {\n                if (item !== undefined) {\n                    values.push(item);\n                }\n            }\n\n            return values;\n        }\n\n        return Array.from([...this._values, ...this._refs]);\n    }\n\n    clone() {\n\n        const set = new internals.Values(this._values, this._refs);\n        set._override = this._override;\n        return set;\n    }\n\n    concat(source) {\n\n        Assert(!source._override, 'Cannot concat override set of values');\n\n        const set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);\n        set._override = this._override;\n        return set;\n    }\n\n    describe() {\n\n        const normalized = [];\n\n        if (this._override) {\n            normalized.push({ override: true });\n        }\n\n        for (const value of this._values.values()) {\n            normalized.push(value && typeof value === 'object' ? { value } : value);\n        }\n\n        for (const value of this._refs.values()) {\n            normalized.push(value.describe());\n        }\n\n        return normalized;\n    }\n};\n\n\ninternals.Values.prototype[Common.symbols.values] = true;\n\n\n// Aliases\n\ninternals.Values.prototype.slice = internals.Values.prototype.clone;\n\n\n// Helpers\n\ninternals.lowercases = function (from) {\n\n    const map = new Map();\n\n    if (from) {\n        for (const value of from) {\n            if (typeof value === 'string') {\n                map.set(value.toLowerCase(), value);\n            }\n        }\n    }\n\n    return map;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,0BAAD,CAAzB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAGA,MAAMG,SAAS,GAAG,EAAlB;AAGAC,MAAM,CAACC,OAAP,GAAiBF,SAAS,CAACG,MAAV,GAAmB,MAAM;EAEtCC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IAEtB,KAAKC,OAAL,GAAe,IAAIC,GAAJ,CAAQH,MAAR,CAAf;IACA,KAAKI,KAAL,GAAa,IAAID,GAAJ,CAAQF,IAAR,CAAb;IACA,KAAKI,UAAL,GAAkBV,SAAS,CAACW,UAAV,CAAqBN,MAArB,CAAlB;IAEA,KAAKO,SAAL,GAAiB,KAAjB;EACH;;EAES,IAANC,MAAM,GAAG;IAET,OAAO,KAAKN,OAAL,CAAaO,IAAb,GAAoB,KAAKL,KAAL,CAAWK,IAAtC;EACH;;EAEDC,GAAG,CAACC,KAAD,EAAQV,IAAR,EAAc;IAEb;IAEA,IAAIP,MAAM,CAACkB,YAAP,CAAoBD,KAApB,CAAJ,EAAgC;MAC5B,IAAI,CAAC,KAAKP,KAAL,CAAWS,GAAX,CAAeF,KAAf,CAAL,EAA4B;QACxB,KAAKP,KAAL,CAAWM,GAAX,CAAeC,KAAf;;QAEA,IAAIV,IAAJ,EAAU;UAAsB;UAC5BA,IAAI,CAACa,QAAL,CAAcH,KAAd;QACH;MACJ;;MAED;IACH,CAdY,CAgBb;;;IAEA,IAAI,CAAC,KAAKE,GAAL,CAASF,KAAT,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAL,EAAyC;MACrC,KAAKT,OAAL,CAAaQ,GAAb,CAAiBC,KAAjB;;MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC3B,KAAKN,UAAL,CAAgBU,GAAhB,CAAoBJ,KAAK,CAACK,WAAN,EAApB,EAAyCL,KAAzC;MACH;IACJ;EACJ;;EAEW,OAALM,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyB;IAEjCF,MAAM,GAAGA,MAAM,IAAI,IAAIvB,SAAS,CAACG,MAAd,EAAnB;;IAEA,IAAIqB,MAAJ,EAAY;MACR,IAAIA,MAAM,CAACZ,SAAX,EAAsB;QAClB,OAAOY,MAAM,CAACE,KAAP,EAAP;MACH;;MAED,KAAK,MAAMC,IAAX,IAAmB,CAAC,GAAGH,MAAM,CAACjB,OAAX,EAAoB,GAAGiB,MAAM,CAACf,KAA9B,CAAnB,EAAyD;QACrDc,MAAM,CAACR,GAAP,CAAWY,IAAX;MACH;IACJ;;IAED,IAAIF,MAAJ,EAAY;MACR,KAAK,MAAME,IAAX,IAAmB,CAAC,GAAGF,MAAM,CAAClB,OAAX,EAAoB,GAAGkB,MAAM,CAAChB,KAA9B,CAAnB,EAAyD;QACrDc,MAAM,CAACE,MAAP,CAAcE,IAAd;MACH;IACJ;;IAED,OAAOJ,MAAM,CAACV,MAAP,GAAgBU,MAAhB,GAAyB,IAAhC;EACH;;EAEDE,MAAM,CAACT,KAAD,EAAQ;IAEV;IAEA,IAAIjB,MAAM,CAACkB,YAAP,CAAoBD,KAApB,CAAJ,EAAgC;MAC5B,KAAKP,KAAL,CAAWmB,MAAX,CAAkBZ,KAAlB;;MACA;IACH,CAPS,CASV;;;IAEA,KAAKT,OAAL,CAAaqB,MAAb,CAAoBZ,KAApB;;IAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,KAAKN,UAAL,CAAgBkB,MAAhB,CAAuBZ,KAAK,CAACK,WAAN,EAAvB;IACH;EACJ;;EAEDH,GAAG,CAACF,KAAD,EAAQa,KAAR,EAAeC,KAAf,EAAsBC,WAAtB,EAAmC;IAElC,OAAO,CAAC,CAAC,KAAKC,GAAL,CAAShB,KAAT,EAAgBa,KAAhB,EAAuBC,KAAvB,EAA8BC,WAA9B,CAAT;EACH;;EAEDC,GAAG,CAAChB,KAAD,EAAQa,KAAR,EAAeC,KAAf,EAAsBC,WAAtB,EAAmC;IAElC,IAAI,CAAC,KAAKlB,MAAV,EAAkB;MACd,OAAO,KAAP;IACH,CAJiC,CAMlC;;;IAEA,IAAI,KAAKN,OAAL,CAAaW,GAAb,CAAiBF,KAAjB,CAAJ,EAA6B;MACzB,OAAO;QAAEA;MAAF,CAAP;IACH,CAViC,CAYlC;;;IAEA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KADA,IAEAe,WAFJ,EAEiB;MAEb,MAAME,KAAK,GAAG,KAAKvB,UAAL,CAAgBsB,GAAhB,CAAoBhB,KAAK,CAACK,WAAN,EAApB,CAAd;;MACA,IAAIY,KAAJ,EAAW;QACP,OAAO;UAAEjB,KAAK,EAAEiB;QAAT,CAAP;MACH;IACJ;;IAED,IAAI,CAAC,KAAKxB,KAAL,CAAWK,IAAZ,IACA,OAAOE,KAAP,KAAiB,QADrB,EAC+B;MAE3B,OAAO,KAAP;IACH,CA5BiC,CA8BlC;;;IAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,KAAK,MAAMW,IAAX,IAAmB,KAAKpB,OAAxB,EAAiC;QAC7B,IAAIT,SAAS,CAAC6B,IAAD,EAAOX,KAAP,CAAb,EAA4B;UACxB,OAAO;YAAEA,KAAK,EAAEW;UAAT,CAAP;QACH;MACJ;IACJ,CAtCiC,CAwClC;;;IAEA,IAAIE,KAAJ,EAAW;MACP,KAAK,MAAMK,GAAX,IAAkB,KAAKzB,KAAvB,EAA8B;QAC1B,MAAM0B,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAYpB,KAAZ,EAAmBa,KAAnB,EAA0BC,KAA1B,EAAiC,IAAjC,EAAuC;UAAEO,EAAE,EAAE;QAAN,CAAvC,CAAjB;;QACA,IAAIF,QAAQ,KAAKG,SAAjB,EAA4B;UACxB;QACH;;QAED,MAAMC,KAAK,GAAG,CAACL,GAAG,CAACG,EAAL,IAAW,OAAOF,QAAP,KAAoB,QAA/B,GACR,CAACA,QAAD,CADQ,GAERK,KAAK,CAACC,OAAN,CAAcN,QAAd,IAA0BA,QAA1B,GAAqCO,MAAM,CAACC,IAAP,CAAYR,QAAZ,CAF3C;;QAIA,KAAK,MAAMR,IAAX,IAAmBY,KAAnB,EAA0B;UACtB,IAAI,OAAOZ,IAAP,KAAgB,OAAOX,KAA3B,EAAkC;YAC9B;UACH;;UAED,IAAIe,WAAW,IACXf,KADA,IAEA,OAAOA,KAAP,KAAiB,QAFrB,EAE+B;YAE3B,IAAIW,IAAI,CAACN,WAAL,OAAuBL,KAAK,CAACK,WAAN,EAA3B,EAAgD;cAC5C,OAAO;gBAAEL,KAAK,EAAEW,IAAT;gBAAeO;cAAf,CAAP;YACH;UACJ,CAPD,MAQK;YACD,IAAIpC,SAAS,CAAC6B,IAAD,EAAOX,KAAP,CAAb,EAA4B;cACxB,OAAO;gBAAEA,KAAK,EAAEW,IAAT;gBAAeO;cAAf,CAAP;YACH;UACJ;QACJ;MACJ;IACJ;;IAED,OAAO,KAAP;EACH;;EAEDU,QAAQ,GAAG;IAEP,KAAKhC,SAAL,GAAiB,IAAjB;EACH;;EAEDP,MAAM,CAACwC,OAAD,EAAU;IAEZ,IAAIA,OAAO,IACPA,OAAO,CAACC,OADZ,EACqB;MAEjB,MAAMzC,MAAM,GAAG,EAAf;;MAEA,KAAK,MAAMsB,IAAX,IAAmB,CAAC,GAAG,KAAKpB,OAAT,EAAkB,GAAG,KAAKE,KAA1B,CAAnB,EAAqD;QACjD,IAAIkB,IAAI,KAAKW,SAAb,EAAwB;UACpBjC,MAAM,CAAC0C,IAAP,CAAYpB,IAAZ;QACH;MACJ;;MAED,OAAOtB,MAAP;IACH;;IAED,OAAOmC,KAAK,CAACQ,IAAN,CAAW,CAAC,GAAG,KAAKzC,OAAT,EAAkB,GAAG,KAAKE,KAA1B,CAAX,CAAP;EACH;;EAEDiB,KAAK,GAAG;IAEJ,MAAMN,GAAG,GAAG,IAAIpB,SAAS,CAACG,MAAd,CAAqB,KAAKI,OAA1B,EAAmC,KAAKE,KAAxC,CAAZ;IACAW,GAAG,CAACR,SAAJ,GAAgB,KAAKA,SAArB;IACA,OAAOQ,GAAP;EACH;;EAED6B,MAAM,CAACzB,MAAD,EAAS;IAEX5B,MAAM,CAAC,CAAC4B,MAAM,CAACZ,SAAT,EAAoB,sCAApB,CAAN;IAEA,MAAMQ,GAAG,GAAG,IAAIpB,SAAS,CAACG,MAAd,CAAqB,CAAC,GAAG,KAAKI,OAAT,EAAkB,GAAGiB,MAAM,CAACjB,OAA5B,CAArB,EAA2D,CAAC,GAAG,KAAKE,KAAT,EAAgB,GAAGe,MAAM,CAACf,KAA1B,CAA3D,CAAZ;IACAW,GAAG,CAACR,SAAJ,GAAgB,KAAKA,SAArB;IACA,OAAOQ,GAAP;EACH;;EAED8B,QAAQ,GAAG;IAEP,MAAMC,UAAU,GAAG,EAAnB;;IAEA,IAAI,KAAKvC,SAAT,EAAoB;MAChBuC,UAAU,CAACJ,IAAX,CAAgB;QAAEH,QAAQ,EAAE;MAAZ,CAAhB;IACH;;IAED,KAAK,MAAM5B,KAAX,IAAoB,KAAKT,OAAL,CAAaF,MAAb,EAApB,EAA2C;MACvC8C,UAAU,CAACJ,IAAX,CAAgB/B,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,GAAqC;QAAEA;MAAF,CAArC,GAAiDA,KAAjE;IACH;;IAED,KAAK,MAAMA,KAAX,IAAoB,KAAKP,KAAL,CAAWJ,MAAX,EAApB,EAAyC;MACrC8C,UAAU,CAACJ,IAAX,CAAgB/B,KAAK,CAACkC,QAAN,EAAhB;IACH;;IAED,OAAOC,UAAP;EACH;;AAhOqC,CAA1C;AAoOAnD,SAAS,CAACG,MAAV,CAAiBiD,SAAjB,CAA2BrD,MAAM,CAACsD,OAAP,CAAehD,MAA1C,IAAoD,IAApD,C,CAGA;;AAEAL,SAAS,CAACG,MAAV,CAAiBiD,SAAjB,CAA2BE,KAA3B,GAAmCtD,SAAS,CAACG,MAAV,CAAiBiD,SAAjB,CAA2B1B,KAA9D,C,CAGA;;AAEA1B,SAAS,CAACW,UAAV,GAAuB,UAAUqC,IAAV,EAAgB;EAEnC,MAAMO,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EAEA,IAAIR,IAAJ,EAAU;IACN,KAAK,MAAMhC,KAAX,IAAoBgC,IAApB,EAA0B;MACtB,IAAI,OAAOhC,KAAP,KAAiB,QAArB,EAA+B;QAC3BuC,GAAG,CAACnC,GAAJ,CAAQJ,KAAK,CAACK,WAAN,EAAR,EAA6BL,KAA7B;MACH;IACJ;EACJ;;EAED,OAAOuC,GAAP;AACH,CAbD"},"metadata":{},"sourceType":"script"}