{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Keys = require('./keys');\n\nconst internals = {};\nmodule.exports = Keys.extend({\n  type: 'function',\n  properties: {\n    typeof: 'function'\n  },\n  rules: {\n    arity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'arity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, _ref) {\n        let {\n          n\n        } = _ref;\n\n        if (value.length === n) {\n          return value;\n        }\n\n        return helpers.error('function.arity', {\n          n\n        });\n      }\n\n    },\n    class: {\n      method() {\n        return this.$_addRule('class');\n      },\n\n      validate(value, helpers) {\n        if (/^\\s*class\\s/.test(value.toString())) {\n          return value;\n        }\n\n        return helpers.error('function.class', {\n          value\n        });\n      }\n\n    },\n    minArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n        return this.$_addRule({\n          name: 'minArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, _ref2) {\n        let {\n          n\n        } = _ref2;\n\n        if (value.length >= n) {\n          return value;\n        }\n\n        return helpers.error('function.minArity', {\n          n\n        });\n      }\n\n    },\n    maxArity: {\n      method(n) {\n        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n        return this.$_addRule({\n          name: 'maxArity',\n          args: {\n            n\n          }\n        });\n      },\n\n      validate(value, helpers, _ref3) {\n        let {\n          n\n        } = _ref3;\n\n        if (value.length <= n) {\n          return value;\n        }\n\n        return helpers.error('function.maxArity', {\n          n\n        });\n      }\n\n    }\n  },\n  messages: {\n    'function.arity': '{{#label}} must have an arity of {{#n}}',\n    'function.class': '{{#label}} must be a class',\n    'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n    'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n  }\n});","map":{"version":3,"names":["Assert","require","Keys","internals","module","exports","extend","type","properties","typeof","rules","arity","method","n","Number","isSafeInteger","$_addRule","name","args","validate","value","helpers","length","error","class","test","toString","minArity","maxArity","messages"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/joi/lib/types/function.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Keys = require('./keys');\n\n\nconst internals = {};\n\n\nmodule.exports = Keys.extend({\n\n    type: 'function',\n\n    properties: {\n        typeof: 'function'\n    },\n\n    rules: {\n        arity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'arity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length === n) {\n                    return value;\n                }\n\n                return helpers.error('function.arity', { n });\n            }\n        },\n\n        class: {\n            method() {\n\n                return this.$_addRule('class');\n            },\n            validate(value, helpers) {\n\n                if ((/^\\s*class\\s/).test(value.toString())) {\n                    return value;\n                }\n\n                return helpers.error('function.class', { value });\n            }\n        },\n\n        minArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n\n                return this.$_addRule({ name: 'minArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length >= n) {\n                    return value;\n                }\n\n                return helpers.error('function.minArity', { n });\n            }\n        },\n\n        maxArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'maxArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length <= n) {\n                    return value;\n                }\n\n                return helpers.error('function.maxArity', { n });\n            }\n        }\n    },\n\n    messages: {\n        'function.arity': '{{#label}} must have an arity of {{#n}}',\n        'function.class': '{{#label}} must be a class',\n        'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n        'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}