{"ast":null,"code":"'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Template = require('./template');\n\nconst internals = {};\n\nexports.compile = function (messages, target) {\n  // Single value string ('plain error message', 'template {error} message')\n  if (typeof messages === 'string') {\n    Assert(!target, 'Cannot set single message string');\n    return new Template(messages);\n  } // Single value template\n\n\n  if (Template.isTemplate(messages)) {\n    Assert(!target, 'Cannot set single message template');\n    return messages;\n  } // By error code { 'number.min': <string | template> }\n\n\n  Assert(typeof messages === 'object' && !Array.isArray(messages), 'Invalid message options');\n  target = target ? Clone(target) : {};\n\n  for (let code in messages) {\n    const message = messages[code];\n\n    if (code === 'root' || Template.isTemplate(message)) {\n      target[code] = message;\n      continue;\n    }\n\n    if (typeof message === 'string') {\n      target[code] = new Template(message);\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n    const language = code;\n    target[language] = target[language] || {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root' || Template.isTemplate(localized)) {\n        target[language][code] = localized;\n        continue;\n      }\n\n      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n      target[language][code] = new Template(localized);\n    }\n  }\n\n  return target;\n};\n\nexports.decompile = function (messages) {\n  // By error code { 'number.min': <string | template> }\n  const target = {};\n\n  for (let code in messages) {\n    const message = messages[code];\n\n    if (code === 'root') {\n      target[code] = message;\n      continue;\n    }\n\n    if (Template.isTemplate(message)) {\n      target[code] = message.describe({\n        compact: true\n      });\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    const language = code;\n    target[language] = {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root') {\n        target[language][code] = localized;\n        continue;\n      }\n\n      target[language][code] = localized.describe({\n        compact: true\n      });\n    }\n  }\n\n  return target;\n};\n\nexports.merge = function (base, extended) {\n  if (!base) {\n    return exports.compile(extended);\n  }\n\n  if (!extended) {\n    return base;\n  } // Single value string\n\n\n  if (typeof extended === 'string') {\n    return new Template(extended);\n  } // Single value template\n\n\n  if (Template.isTemplate(extended)) {\n    return extended;\n  } // By error code { 'number.min': <string | template> }\n\n\n  const target = Clone(base);\n\n  for (let code in extended) {\n    const message = extended[code];\n\n    if (code === 'root' || Template.isTemplate(message)) {\n      target[code] = message;\n      continue;\n    }\n\n    if (typeof message === 'string') {\n      target[code] = new Template(message);\n      continue;\n    } // By language { english: { 'number.min': <string | template> } }\n\n\n    Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n    const language = code;\n    target[language] = target[language] || {};\n\n    for (code in message) {\n      const localized = message[code];\n\n      if (code === 'root' || Template.isTemplate(localized)) {\n        target[language][code] = localized;\n        continue;\n      }\n\n      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n      target[language][code] = new Template(localized);\n    }\n  }\n\n  return target;\n};","map":{"version":3,"names":["Assert","require","Clone","Template","internals","exports","compile","messages","target","isTemplate","Array","isArray","code","message","language","localized","decompile","describe","compact","merge","base","extended"],"sources":["/home/aminou/React/mon-coter-somber/node_modules/@hapi/joi/lib/messages.js"],"sourcesContent":["'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Template = require('./template');\n\n\nconst internals = {};\n\n\nexports.compile = function (messages, target) {\n\n    // Single value string ('plain error message', 'template {error} message')\n\n    if (typeof messages === 'string') {\n        Assert(!target, 'Cannot set single message string');\n        return new Template(messages);\n    }\n\n    // Single value template\n\n    if (Template.isTemplate(messages)) {\n        Assert(!target, 'Cannot set single message template');\n        return messages;\n    }\n\n    // By error code { 'number.min': <string | template> }\n\n    Assert(typeof messages === 'object' && !Array.isArray(messages), 'Invalid message options');\n\n    target = target ? Clone(target) : {};\n\n    for (let code in messages) {\n        const message = messages[code];\n\n        if (code === 'root' ||\n            Template.isTemplate(message)) {\n\n            target[code] = message;\n            continue;\n        }\n\n        if (typeof message === 'string') {\n            target[code] = new Template(message);\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n\n        const language = code;\n        target[language] = target[language] || {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root' ||\n                Template.isTemplate(localized)) {\n\n                target[language][code] = localized;\n                continue;\n            }\n\n            Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n            target[language][code] = new Template(localized);\n        }\n    }\n\n    return target;\n};\n\n\nexports.decompile = function (messages) {\n\n    // By error code { 'number.min': <string | template> }\n\n    const target = {};\n    for (let code in messages) {\n        const message = messages[code];\n\n        if (code === 'root') {\n            target[code] = message;\n            continue;\n        }\n\n        if (Template.isTemplate(message)) {\n            target[code] = message.describe({ compact: true });\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        const language = code;\n        target[language] = {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root') {\n                target[language][code] = localized;\n                continue;\n            }\n\n            target[language][code] = localized.describe({ compact: true });\n        }\n    }\n\n    return target;\n};\n\n\nexports.merge = function (base, extended) {\n\n    if (!base) {\n        return exports.compile(extended);\n    }\n\n    if (!extended) {\n        return base;\n    }\n\n    // Single value string\n\n    if (typeof extended === 'string') {\n        return new Template(extended);\n    }\n\n    // Single value template\n\n    if (Template.isTemplate(extended)) {\n        return extended;\n    }\n\n    // By error code { 'number.min': <string | template> }\n\n    const target = Clone(base);\n\n    for (let code in extended) {\n        const message = extended[code];\n\n        if (code === 'root' ||\n            Template.isTemplate(message)) {\n\n            target[code] = message;\n            continue;\n        }\n\n        if (typeof message === 'string') {\n            target[code] = new Template(message);\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n\n        const language = code;\n        target[language] = target[language] || {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root' ||\n                Template.isTemplate(localized)) {\n\n                target[language][code] = localized;\n                continue;\n            }\n\n            Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n            target[language][code] = new Template(localized);\n        }\n    }\n\n    return target;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}